x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
?matrix
matrix(data=myMatrix,4,5)
myMatrix2 <- matrix(data=1:20,4,5)
identical(myMatrix, myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
?dataframe
colnames(myData) <- cnames
myData
quit
exit
q()
library(XConnect)
library(gdata)
q()
install.packages("knitr")
source('~/GitHub/datasciencecoursera/pollutantmean.r')
oocm.Small[which(oocm.Small[,3]=="Not Available"),3] <-NA
?small
?which
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "9408e1f3b69150b5507b")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "9408e1f3b69150b5507b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "cf154c5ec0cea1c8a8d1c023e5b2a8eab50e13d1")
myapp <- oauth_app("github", "9408e1f3b69150b5507b", "cf154c5ec0cea1c8a8d1c023e5b2a8eab50e13d1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
library(httpuv)
?data.frame
L3 <- LETTERS[1:3]
L3
LL <- LETTERS
ll
LL
Name <- paste(c(LETTERS[4},LETTERS[15],LETTERS[13}),collapse="")
Name <- paste(c(LETTERS[4},LETTERS[15],LETTERS[13]),collapse="")
Name <- c(LETTERS[4},LETTERS[15],LETTERS[13])
Name <- paste(c(LETTERS[4],LETTERS[15],LETTERS[13]),collapse="")
Name
?LOWER
?lower
help("lowercase")
?help("lowercase")
?plyr
?help("plyr")
example("plyr")
getwd()
q()
example("split")
q()
debug(ls)
ls
ls()
undebug(ls)
q
Q
?sapply
?lapply
M <- matrix( 1:6, ncol=3 )
tM <- t(M)
tm
tM
M %*% tM
A <- matrix(c(3, -1, 2, -2, 4, 0) ncol=2)
A <- matrix((3, -1, 2, -2, 4, 0) ncol=2)
A <- matrix([3, -1, 2, -2, 4, 0] ncol=2)
vec <- c(1,2,3,4,5,6)
vec
vecM <- matrix(vec, ncol=3)
vecM
vecM1 <- matrix(vec, ncol=2)
vec<1
vecM1
vecM %*% vecM1
q()
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github"
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(sqldf)
install.packages("sqldf")
library(sqldf)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs") ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1") ## NO
query4 <- sqldf("select * from acs where AGEP < 50") ## NO
identical(query3, query4)
url
f
download.file(url, f)
?download.file
download.file(url, f, curl)
download.file(url, f, auto)
download.file(url, f)
url
example(download.file)
scan(file = "http://biostat.jhsph.edu/~jleek/contact.html", nlines = 30)
?scan
x <- sub("Tutorial","Examples",s)
example(sub)
txt <- c("arm","foot","lefroo", "bafoobar")
txt
if(length(i <- grep("foo", txt)))
cat("'foo' appears at least once in\n\t", txt, "\n")
q()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
url
getwd()
example(readlines)
?readlines
str(readlines)
?readlines
help("readlines")
help(readlines)
data <- read.csv("./getdata-wksst8110.for", header=T
)
data
?read.fwf
dim(data)
file_name <- "./getdata-wksst8110.for
)
"
file_name
df <- read.fwf(file=file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
df <- read.fwf(file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
ff <- tempfile()
cat(file = ff, "123456", "987654", sep = "\n")
file
ff
ff <-  "C:\\Users\\Dominic\\file120859b1058"
read.fwf(ff, widths = c(1,2,3))
getwd()
ff <-  "C:\\Users\\Dominic\\Documents\\file120859b1058"
read.fwf(ff, widths = c(1,2,3))
q()
dataFileURL <- "https://dl.dropbox.com/u/7710864/data/csv_hid/ss06hid.csv"
dataFileURL
download.file(url=dataFileURL, destfile="data/W2Q3_ss06hid.csv", method="curl")
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/PUMSDataDict06.pdf"
, destfile="doc/PUMSDataDict06.pdf", mode="wb")
ID_Survey.df <- read.csv("data/W2Q3_ss06hid.csv")
download.file(url=dataFileURL, destfile="./W2Q3_ss06hid.csv", method="curl")
dir()
ls()
files()
file()
dir()
ID_Survey.df <- read.csv("W2Q3_ss06hid.csv")
ID_Survey.df <- read.csv("./W2Q3_ss06hid.csv")
getwd()
dir()
ID_Survey.df <- read.csv("ss06hid.csv")
answer3 <- nrow(ID_Survey.df[ID_Survey.df$VAL==24 & !is.na(ID_Survey.df$VAL),])
answer3
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
f
dir()
getwd()
dt <- data.table(read.csv(f))
f
dt <- data.table(read.csv("C:/Users/Dominic/Documents/ss06hid.csv"))
dt <- read.csv("C:/Users/Dominic/Documents/ss06hid.csv")
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
which(agricultureLogical)[1:3]
q()
q()
q()
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
q()
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
q()
install.packages("RMySQL", type = "source")
library(RMySQL)
q()
install.packages("RMySQL", type = "source")
R.home()
q()
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
q()
install.packages("RMySQL", type="sources")
install.packages("RMySQL", type="source")
q()
install.packages("RMySQL", type= "source")
q()
library("RMySQL")
library(RMySql)
install.packages("RMySQL", type = "source")
CMD INSTALL RMySQL_0.9-3.tar.gz
utils:::menuInstallPkgs()
?library
library(mongo)
library(RMongo)
utils:::menuInstallLocal()
setRepositories()
utils:::menuInstallPkgs()
library(rmongodb)
q()
library(RMySQL)
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
vqplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month)
)
airquality
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
?xyplot
example(panel.abline())
add a less smoother to the
scatterplot
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
example(points())
?points()
?lpoints()
q()
x <- 1:4
p <- x/sum(x)
p
temp <- rbind(x,p)
temp
rownames(temp) <- c("X", "Prob")
temp
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(datasets)
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
q()
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
hist(galton$child,col="blue",breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
plot(galton$parent,galton$child,pch=19,col="blue")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
getwd()
w <- c(2, 1, 3, 1)
mean(w)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
ggplot(data=A, aes(x=mass, y=sma, label=name, colour=giant, shape=giant)) +
geom_point() +
scale_x_log10(limits=c(1e23, 1e28)) +
scale_y_log10() +
geom_text(adj=-0.2, legend=FALSE) +
labs(x="Planet mass (kg)", y="Semi-major axis of planet orbit (m)",
colour="Type", shape="Type")
require(ggplot2)
ggplot(data=A, aes(x=mass, y=sma, label=name, colour=giant, shape=giant)) +
+  geom_point() +
+  scale_x_log10(limits=c(1e23, 1e28)) +
+  scale_y_log10() +
+  geom_text(adj=-0.2, legend=FALSE) +
+  labs(x="Planet mass (kg)", y="Semi-major axis of planet orbit (m)",
+       colour="Type", shape="Type")
plot(x,y=1:(24*2))
help(strptime)
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- strptime(x, "%d%b%Y")
z
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
60 * 24 * 2
example(points)
plot(x,y, xlab="Weight", ylab="Height", main="Scatterplot", pch=20)
x <- rnorm(100); y <- rnorm(100)
plot(x,y, xlab="Weight", ylab="Height", main="Scatterplot", pch=20)
legend("topright", legend = "Data", pch = 20)
fit <- lm(y-x)
fit <- lm(y - x)
a <- format(Sys.time(), "%a %b %d %X %Y %Z")
str(a)
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- strptime(x, "%d%b%Y")
z
str(z)
?ymd_hms
q()
?read.csv2.sql
?read.csv.sql
?data.frame
?read.csv.sql
install.packages("RH2")
library(RH2)
q()
install.packages("rJava")
library(rJava)
q()
library(rJava)
?as.date
?as.date()
help(as.date)
help(as.date())
help(as.Date)
?read.csv
?format
?as.Char
q()
install.packages("gsubfn")
q()
install.packages("dplyr")
q()
install.packages("ggplot")
install.packages("ggplot2")
q()
setwd("C://Users//Dominic//ExData_Plotting1//ExData_Plotting1)
setwd("C://Users//Dominic//ExData_Plotting1//ExData_Plotting1//ExData_Plotting1")
getwd()
setwd("C://Users//Dominic//ExData_Plotting1//ExData_Plotting1//ExData_Plotting1")
setwd("C:/Users/Dominic/ExData_Plotting1/ExData_Plotting1")
file_Dir_Name <- "C://Users//Dominic//ExData_Plotting1//household_power_consumption.txt"
dataUsed <- read.table(file_Dir_Name, header=T, sep=';', na.strings="?",
stringsAsFactors=T, skipNul=T)
subDF = subset(dataUsed, as.Date(dataUsed$Date,"%d/%m/%Y")
== as.Date("01/02/2007","%d/%m/%Y") |
as.Date(dataUsed$Date,"%d/%m/%Y")
== as.Date("02/02/2007","%d/%m/%Y")
)
subDF$DateTime <- strptime(paste(subDF$Date, subDF$Time), "%d/%m/%Y %H:%M:%S")
png(filename = "plot3.png", width = 480, height = 480, units = "px")
colNames = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(subDF$DateTime, subDF$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(subDF$DateTime, subDF$Sub_metering_2, type="l", col="red")
lines(subDF$DateTime, subDF$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col=c("black","blue","red"), legend=colNames)
dev.off()
file_Dir_Name <- "C://Users//Dominic//ExData_Plotting1//household_power_consumption.txt"
dataUsed <- read.table(file_Dir_Name, header=T, sep=';', na.strings="?",
stringsAsFactors=T, skipNul=T)
subDF = subset(dataUsed, as.Date(dataUsed$Date,"%d/%m/%Y")
== as.Date("01/02/2007","%d/%m/%Y") |
as.Date(dataUsed$Date,"%d/%m/%Y")
== as.Date("02/02/2007","%d/%m/%Y")
)
subDF$DateTime <- strptime(paste(subDF$Date, subDF$Time), "%d/%m/%Y %H:%M:%S")
par (mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0))
with(subDF, {
plot(DateTime, Global_active_power, xlab="", ylab="Global Active Power", type="l")
plot(DateTime, Voltage, xlab="datetime", ylab="Voltage", type="l")
cols = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(DateTime, Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(DateTime, Sub_metering_2, type="l", col="red")
lines(DateTime, Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col=c("black","blue","red"), legend=cols, bty="n")
plot(DateTime, Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type="l")
})
dev.off()
png(filename = "plot4.png", width = 480, height = 480, units = "px")
par (mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0))
with(subDF, {
plot(DateTime, Global_active_power, xlab="", ylab="Global Active Power", type="l")
plot(DateTime, Voltage, xlab="datetime", ylab="Voltage", type="l")
cols = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(DateTime, Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(DateTime, Sub_metering_2, type="l", col="red")
lines(DateTime, Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col=c("black","blue","red"), legend=cols, bty="n")
plot(DateTime, Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type="l")
})
dev.off()
